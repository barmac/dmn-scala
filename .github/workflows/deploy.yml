# If this workflow is triggered by a push to master, it
#        deploys a SNAPSHOT
# If this workflow is triggered by publishing a Release, it
#        deploys a RELEASE with the selected version
#        updates the project version by incrementing the patch version
#        commits the version update change to the repository's default branch.
name: Deploy artifacts with Maven
on:
  push:
    branches: [master]
  release:
    types: [published]
jobs:
  publish:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Import Secrets
      uses: hashicorp/vault-action@v2.1.0
      id: vault
      with:
        url: ${{ secrets.VAULT_ADDR }}
        method: approle
        roleId: ${{ secrets.VAULT_ROLE_ID }}
        secretId: ${{ secrets.VAULT_SECRET_ID }}
        secrets: |
          secret/data/common/github.com/actions/camunda NEXUS_PSW | NEXUS_PSW;
          secret/data/common/github.com/actions/camunda NEXUS_USR | NEXUS_USR;
          secret/data/common/github.com/actions/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE | MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE;
          secret/data/common/github.com/actions/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC | MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC;
          secret/data/common/github.com/actions/camunda MAVEN_CENTRAL_DEPLOYMENT_PSW | MAVEN_CENTRAL_DEPLOYMENT_PSW;
          secret/data/common/github.com/actions/camunda MAVEN_CENTRAL_DEPLOYMENT_USR | MAVEN_CENTRAL_DEPLOYMENT_USR;
    - name: Convert secret
      run: |-
        echo 'MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC<<EOF' >> $GITHUB_ENV
        base64 -d <<< $MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC
        echo 'EOF' >> $GITHUB_ENV
    - name: Set up Nexus authentication
      uses: actions/setup-java@v1
      with:
        java-version: 11
        server-id: camunda-nexus
        server-username: NEXUS_USR
        server-password: NEXUS_PSW
    - name: Set up Maven Central authentication
      uses: actions/setup-java@v1
      with:
        java-version: 11
        server-id: central
        server-username: MAVEN_CENTRAL_DEPLOYMENT_USR
        server-password: MAVEN_CENTRAL_DEPLOYMENT_PSW
        settings-path: ${{ github.workspace }}
        gpg-private-key: ${{ env.MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC }}
    - name: Setup GPG agent and cache signing passphrase
      run: |-
        pkill gpg-agent || /bin/true
        gpg-agent --daemon --allow-preset-passphrase --default-cache-ttl 1 --max-cache-ttl 3600
        /usr/lib/gnupg2/gpg-preset-passphrase -c 43EFFB7D071BAC81111B5F2B9E708A0ABA0F180E <<< $MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE
        /usr/lib/gnupg2/gpg-preset-passphrase -c 9DAEDD35FA0F3CDFDCF1F021E53D07F1E1C8BE44 <<< $MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE
    - name: Cache
      uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Run maven
      run: mvn -B
    - if: ${{ ! github.event.release }}
      name: Publish SNAPSHOT
      run: |-
        mvn -B -DskipTests deploy
        sed -i 's@:camunda-nexus:.*$@:central:https://oss.sonatype.org/content/repositories/snapshots/@g' target/nexus-staging/deferred/.index
        mvn -B -DskipTests -s $GITHUB_WORKSPACE/settings.xml org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged
    - if: github.event.release
      name: Publish Maven Release
      run: |-
        # 1. set version
        mvn -B versions:set versions:update-child-module -DnewVersion=${{ github.event.release.tag_name }}
        # 2. perform release
        mvn -B -DskipTests -s $GITHUB_WORKSPACE/settings.xml -DnexusUrl=https://oss.sonatype.org/ -DserverId=central -DreleaseVersion=${{ github.event.release.tag_name }} -Dgpg.sign initialize \
          package source:jar javadoc:jar \
          deploy org.apache.maven.plugins:maven-gpg-plugin:sign \
          nexus-staging:deploy
        # 3. push new development version
        git config --global user.name "Release Bot"
        git config --global user.email actions@github.com
        mvn -B org.apache.maven.plugins:maven-release-plugin:update-versions -DgenerateBackupPoms=false
        git add "**pom.xml"
        mvn -B scm:checkin -Dbasedir=. -Dmessage="release(v${{ github.event.release.tag_name }}): prepare for next development iteration" -DdeveloperConnectionUrl="scm:git:https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${{ github.event.repository.full_name }}.git"

    - name: Archive artifacts
      run: |-
        ZIPFILE=${{github.event.repository.name}}-${{github.event.release.tag_name}}.zip
        zip $ZIPFILE $(find target/nexus-staging -name "*.jar")
        echo "::set-output name=filename::${ZIPFILE}"
      id: zip
    - if: github.event.release
      name: Attach artifacts to GitHub Release (Release only)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.zip.outputs.filename }}
        asset_name: ${{ steps.zip.outputs.filename }}
        asset_content_type: application/zip
    - if: github.event.release
      name: Checkout ${{ github.event.repository.default_branch }} and commit new development version (Release only)
      run: |-
        git config --global user.name "Release Bot"
        git config --global user.email actions@github.com
        git fetch
        git checkout -b ${{ github.event.repository.default_branch }} --track origin/${{ github.event.repository.default_branch }}
        mvn -B org.apache.maven.plugins:maven-release-plugin:update-versions -DgenerateBackupPoms=false
        git add "**pom.xml"
        mvn -B scm:checkin -Dbasedir=. -Dmessage="release(v${{ github.event.release.tag_name }}): bump version" -DdeveloperConnectionUrl="scm:git:https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${{ github.event.repository.full_name }}.git"
